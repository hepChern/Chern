#!/usr/bin/python

import os
import sys
import Chern as chen
from IPython import embed
from IPython import start_ipython

def default(args):
    # print "Running default argument"
    # embed()
    # import test
    start_ipython(argv=["--profile=chern", "--ipython-dir=/home/zhaomr/workdir/Chern/profile"])
    # start_ipython(argv=["--profile=test"])
    print "Running"
    # print args

def projects(args):
    print "hello"
    print args.projects

def start(args):
    print args

# def

# ------------------------------------------------------------
if __name__ == "__main__" :
    chen.utils.get_global_config()

    from argparse import ArgumentParser
    parser = ArgumentParser()
    parser.add_argument("command", nargs="*", help="command")
    parser.set_defaults(func=default)
    args = parser.parse_args()
    args.func(args)
    subparser = parser.add_subparsers()

    parser_projects = subparser.add_parser("projects")
    parser_projects.add_argument("projects", nargs="*", help="hello")
    parser_projects.set_defaults(func=projects)

    args = parser_projects.parse_args()
    # args.func(args)
    # parser.add_argument(dest="command", nargs='+', help="list all the projects existing")
    # parser.add_argument("--std_command_path", help="standard command output, don't specifiy it if you are only a user")
    # args = parser.parse_args()

    # NEW: If no command specified, start a IPython shell with the current project
    # if len(args.command) == 0:
    # chen.enter(chen.projects.get_current_project())


    """

    return_value = ""
    if args.command[0] == "projects" :
        return_value = chen.projects.main(args.command[1:])

    if args.command[0] == "clean" :
        chen.clean()

    if args.command[0] == "config":
        from subprocess import call
        call("vim " + os.environ["HOME"] + "/.Chern/config.py", shell=True)

    if args.command[0] == "brother":
        pass
    #print args.projects

    if args.command[0] == "start":
        import subprocess
        if os.path.exists(os.environ["HOME"] + "/.Chern/server.closed"):
            os.remove(os.environ["HOME"] + "/.Chern/server.closed")
l        subprocess.Popen("python " + os.environ["CHERNSYSROOT"]+"/Chern/server.py", shell=True)

    if args.command[0] == "stop":
        open(os.environ["HOME"] + "/.Chern/server.closed", "a").close()

    if type(return_value) == str :
        std_command_output_file = open(args.std_command_path, "w")
        print "return value is ", return_value
        std_command_output_file.write(return_value)
        std_command_output_file.close()
    """
